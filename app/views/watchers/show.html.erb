<p id="notice"><%= notice %></p>

<div class="show-topper">
  <h3 class="keywords-list">Name</h3>
  <p class="keywords"><%= @watcher.name %></p>

  <h3 class="keywords-list">Keywords</h3>
  <p class="keywords"><%= @watcher.keywords %></p>

  <p class="back-links">
    <%= link_to 'Edit', edit_watcher_path(@watcher) %>
    <%= link_to 'Back', root_path %>
  </p>
</div>

<section class="filters">
  <dl class="facets">
      <dt>Sort:</dt>
      <dd><a href="#" class="sort recent active">Most Recent</a></dd>
      <dd><a href="#" class="sort retweets">Most Retweets</a></dd>
      <dd><a href="#" class="sort media">Has Media</a></dd>
  </dl>
</section>
<a name="top"></a>
<p class="back-links"><a class="prev-page" style="display:none" href="#top">Previous</a>
<a class="next-page" href="#top">Next</a></p>
<section class="tweets">

  <% @watcher.tweets.limit(100).each_with_index do |tweet, index| %>
      <div class="tweet-container" data-id="<%= tweet.fields['id_str'] %>" data-time="<%= tweet.fields['created_at'].to_time.to_i %>" data-retweets="<%= tweet.retweet_count %>" data-index="<%= index%>" data-has-media="<%= tweet.has_media? %>" <% if index > 20 %> style="display: none;" <% end %>>
        <div class="tweet-left">
          <blockquote class="twitter-tweet">
            <p><%= tweet.text %></p>
            &mdash; Twitter API (@<%= tweet.screen_name %>) <a href="https://twitter.com/<%= tweet.screen_name %>/status/<%= tweet.fields['id_str'] %>" data-datetime="<%= tweet.fields['created_at'] %>"><% tweet.fields['user'] %></a>
          </blockquote>
        </div>
        <ul class="tweet-states">
        <% @statuses.each do |status|  %>
          <% if status.name == 'verified' %>
          <li<% if tweet.status.present? && tweet.status.name == status.name %> class="active-pick" <% end %>>
            <%= link_to(update_status_path(:id => tweet.id, :status_id => status.id), :method => :put, :class => 'verify', :data => { :status_id => status.id, :action => status.name }) do %>
            <svg width="40" height="30">
              <use x="8" y="8" xlink:href="#thumbsup" />
            </svg>
            <% end %>
          </li>
          <% elsif status.name == 'looking' %>
          <li<% if tweet.status.present? && tweet.status.name == status.name %> class="active-pick" <% end %>>
            <%= link_to(update_status_path(:id => tweet.id, :status_id => status.id), :method => :put, :class => 'looking', :data => { :status_id => status.id, :action => status.name }) do %>
            <svg width="40" height="30">
              <use x="7" y="10" xlink:href="#maybe" />
            </svg>
            <% end %>
          </li>
          <% elsif status.name == 'unverified' %>
          <li<% if tweet.status.present? && tweet.status.name == status.name %> class="active-pick" <% end %>>
            <%= link_to(update_status_path(:id => tweet.id, :status_id => status.id), :method => :put, :class => 'unverified', :data => { :status_id => status.id, :action => status.name }) do %>
            <svg width="40" height="30">
              <use x="8" y="12" xlink:href="#thumbsdown" />
            </svg>
            <% end %>
          </li>
        <% end %>
      <% end %>
      </ul>
    </div>
  </section>
<% end %>
<p class="back-links">
<a class="prev-page" style="display:none" href="#top">Previous</a>
<a class="next-page" href="#top">Next</a>
</p>
<script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<script>
  (function ($) {
    var page = 0;
    function setAction($this, $thisParent, action) {
      //$this.parents('.tweet-states').hide().before('<p>' + action + ' <a class="edit-state" href="#">Edit</a></p>');
      $this.parents('li').addClass('active-pick').siblings().removeClass('active-pick');
      $thisParent.addClass(action);
    }

    function showPage(thisPage) {
      var tweetsPerPage = 20,
        min = thisPage * tweetsPerPage,
        max = min + tweetsPerPage;

      $('.tweet-container').each(function (i, v) {
        $thisTweet = $(v),
          index = parseInt($thisTweet.attr('data-index'), 10);
        if (index >= min && index < max) {
          $thisTweet.show();
        } else {
          $thisTweet.hide();
        }
      });

      if (page == 0) {
        $('.prev-page').hide();
      } else if (page >= 4) {
        $('.next-page').hide();
      } else {
        $('.prev-page').show();
        $('.next-page').show();
      }
    }

    $(document).ready(function() {
      $('body').on('click', '.tweet-container>.tweet-states a', function (e){
        e.preventDefault();
        e.stopPropagation();
        var $this = $(this),
          $thisParent = $this.parents('.tweet-container'),
          id = parseInt($thisParent.attr('data-id'),10),
          action = $this.attr('data-action');

        $.ajax({
          'url': $this.attr('href'),
          'type': 'PUT',
          'success': function () {
            setAction($this, $thisParent, action)
          },
          'error': function () {
            setAction($this, $thisParent, action)
          },
        });
      });
      $('body').on('click', '.tweet-container .edit-state', function (e){
        e.preventDefault();
        e.stopPropagation();
        $(this).parents('.tweet-container').find('.tweet-states').show();
        $(this).parents('p').remove();
      });
    });

    $('body').on('click', '.next-page', function (e) {
      //e.preventDefault();
      page++;
      showPage(page);
    });
    $('body').on('click', '.prev-page', function (e) {
      //e.preventDefault();
      page--;
      showPage(page);
    })
  })(jQuery);
</script>
